CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

SET(TENSORFLOW_INCLUDE_PATH /tfpath/tf-1.11.0-build/tf_new)
# set tensorflow framework library path, where libtensorflow_framework.so and libtensorflow_cc.so path
SET(TENSORFLOW_LIBARY /tfpath/tf-1.11.0-build/lib/libtensorflow_cc.so)
SET(TENSORFLOW_FRAMEWORK_LIBARY /tfpath/tf-1.11.0-build/lib/libtensorflow_framework.so)
SET(PROTO_INCLUDE_PATH /usr/local/protobuf-3.6.0)
SET(PROTO_LIBRARY /usr/local/protobuf-3.6.0/lib)

# opencv build dir 
SET(OpenCV_DIR /oepncvpath/opencv3.4.2-cuda9.0-build/opencv3_build/share/OpenCV)
MESSAGE(STATUS "TENSORFLOW_INCLUDE_PATH ${TENSORFLOW_INCLUDE_PATH}")
MESSAGE(STATUS "TENSORFLOW_LIBARY ${TENSORFLOW_LIBARY}")
MESSAGE(STATUS "TENSORFLOW_FRAMEWORK_LIBARY ${TENSORFLOW_FRAMEWORK_LIBARY}")
MESSAGE(STATUS "PROTOBUF_INCLUDE_PATH ${PROTO_INCLUDE_PATH}")
SET(EIGEN_INCLUDE_PATH ${TENSORFLOW_INCLUDE_PATH}/Eigen)
SET(ABSL_INCLUDE_PATH ${TENSORFLOW_INCLUDE_PATH}/absl)
MESSAGE(STATUS "ABSL_INCLUDE_PATH" ${ABSL_INCLUDE_PATH})

#INCLUDE(FindProtobuf)
#FIND_PACKAGE(Protobuf REQUIRED)
FIND_PACKAGE(OpenCV 3 REQUIRED)

INCLUDE_DIRECTORIES(${PROTOBUF_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${TENSORFLOW_INCLUDE_PATH})
INCLUDE_DIRECTORIES(${EIGEN_INCLUDE_PATH})
INCLUDE_DIRECTORIES(${ABSL_INCLUDE_PATH})
INCLUDE_DIRECTORIES(${PROTO_INCLUDE_PATH})

SET(EXAMPLE_LIBRARIES
${PROTO_LIBRARY}
${TENSORFLOW_FRAMEWORK_LIBARY}
${TENSORFLOW_LIBARY}
${OpenCV_LIBS})
ADD_EXECUTABLE(inference inference.cpp)

SET(LDFLAGS "-std=c++11 -O3 -ggdb -Wall")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}${LDFLAGS}")

MESSAGE(STATUS "CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}")
MESSAGE(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
TARGET_LINK_LIBRARIES(example ${EXAMPLE_LIBRARIES} ${CMAKE_CXX_FLAGS})
